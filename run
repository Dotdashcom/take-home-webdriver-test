#!/bin/sh

##############
# Utils
func_result=''
STATUS=''
THREADS=1
COUNTER=0
BGREEN='\033[1;32m' # Bold Green
NO_COLOR='\033[0m' # No Color
BOLD='\033[1m'
SG_ACTION=''

##############
# Options
DEFAULT_LOG_LEVEL=info
TEST_SUITE_XML_FILE=regression.xml
WD_REMOTE=false

##############
# Run-command args
USAGE=$BGREEN"\nUsage:$NO_COLOR $(basename "$0")\n \
      $(basename "$0") [-r [-T threads] | [-T threads] | -h]\n \
      $(basename "$0") [-G start [-T threads]]\n \
      $(basename "$0") [-G stop]\n \
       \n  h : print this help message \
       \n  r : runs the test suite against a remote Chrome Selenium node\n \
       \n  g start          : use \`start\' to start a Selenium Node \
       \n  g start -T nodes : use \`nodes\' to specify the amount of Chrome Selenium nodes to create \
       \n  g stop           : use \`stop\' to stop the current Selenium Grid \
       \n  r -T threads     : use \`threads\' to specify the amount of Chrome Selenium nodes used to run the test suite in parallel  \
       \n  T threads        : use \`threads\' to specify the amount of threads used to run the test suite in parallel\n";

while getopts ":rhT:G:" flag
do
    case "${flag}" in
        r) WD_REMOTE="true";;
        T) THREADS="${OPTARG}";;
        G) SG_ACTION="${OPTARG}";;
        h) printf "$USAGE" 1>&2 ; exit 1;;
        ?) printf "$BOLD""$(basename "$0"): illegal option: -${OPTARG}\n$USAGE\n""$BOLD"; exit 1 ;;
    esac
done

##############
# Containers
#
# The-Internet app
CONTAINER_APP_IMAGE="gprestes/the-internet:latest";
CONTAINER_APP_PORTS="7080:5000";
CONTAINER_APP_RUN_CMD="docker run -d \
      --rm --net dotdash --name website \
      -p 7080:5000 $CONTAINER_APP_IMAGE";
CONTAINER_APP_IP="0.0.0.0"
#
# Selenium hub
CONTAINER_SELENIUM_HUB_IMAGE="selenium/hub:latest";
CONTAINER_SELENIUM_HUB_PORTS="4442-4444:4442-4444";
CONTAINER_SELENIUM_HUB_RUN_CMD="docker run -d \
      -e SE_VNC_NO_PASSWORD=1 \
      --rm --net dotdash --name selenium-hub \
      -p 4442-4444:4442-4444 \
      -v /dev/shm:/dev/shm "$CONTAINER_SELENIUM_HUB_IMAGE;
CONTAINER_SELENIUM_HUB_IP="0.0.0.0"
#
# Chrome nodes
CONTAINER_CHROME_NODES_IMAGE="selenium/node-chrome:latest";
CONTAINER_CHROME_NODES_RUN_CMD="docker run -d --name chrome-node%s \
      --net dotdash -e SE_EVENT_BUS_HOST=selenium-hub \
      -v ""$(pwd)""/target:/home/seluser/Downloads \
      --shm-size='2g' -e SE_EVENT_BUS_PUBLISH_PORT=4442 \
      -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 "$CONTAINER_CHROME_NODES_IMAGE;
#
# Container network name
NET_NAME="dotdash"

strip_image_version() {
  IMAGE=$1;
  IFS=":"; read -a img <<< "$1"; IMAGE=${img[0]};
  func_result=$IMAGE;
}

strip_image_name() {
  IMAGE=$1;
  IFS=":"; read -a ver <<< "$1";
  func_result=${ver[1]};
}

run_container() {
  CONTAINER_RUN_CMD=$1

  # Run container
  CID=$(eval "$CONTAINER_RUN_CMD") 1>&2
  if [ ! "$CID" ]; then
    echo "Container doesn't exist";
  else
    printf "\r\033[K[OK] $STATUS | Id: $CID\n";
  fi
  unset CID
}

docker_container_startup () {
  CONTAINER_IMAGE=$1
  CONTAINER_RUN_CMD=$2
  IFS=" "; CONTAINER_NAME=$(echo "$CONTAINER_RUN_CMD" | grep -o -E "\-\-name[[:blank:]].+[[:blank:]]" | cut -w -f 2);
  STATUS="Container image: $CONTAINER_IMAGE | name: $CONTAINER_NAME";
  printf "$STATUS";

  # Container cleanup
  match=$(echo "$CONTAINER_RUN_CMD" | grep $CONTAINER_NAME | wc -l);
  if [ "$match" -gt 0 ]; then
    docker rm -f "$CONTAINER_NAME" > /dev/null 2>&1
  fi

  # Clear other statuses as well
  docker ps -aq -f status=exited -f ancestor="$CONTAINER_IMAGE" | xargs docker rm -f > /dev/null 2>&1
  docker ps -aq -f status=paused -f ancestor="$CONTAINER_IMAGE" | xargs docker rm -f > /dev/null 2>&1
  docker ps -aq -f status=dead -f ancestor="$CONTAINER_IMAGE" | xargs docker rm -f > /dev/null 2>&1

  # Run the container
  run_container "$CONTAINER_RUN_CMD"
  STATUS=''
}

wait_until_container_is_ready() {
  # Get server port
  SERVER=$1;
  IFS=":"; read -a starr <<< "$2"; PORTS=${starr[0]};

  if [[ $PORTS =~ "-" ]]; then
    IFS="-"; read -a starr2 <<< "$PORTS"; PORT=${starr2[1]}
  else PORT=${PORTS[0]}; fi;

  # Wait until the server is online
  printf "Trying $SERVER:$PORT ";
  until STATUS=$(nc -z "$SERVER" "$PORT" > /dev/null 2>&1); do
    printf ".";
    sleep 1;
  done;
  printf "\r\033[K[OK] Connection to $SERVER port $PORT succeeded!\n"
  STATUS=''
}

start_chrome_nodes() {
COUNTER=$1
  while [[ $COUNTER -ne 0 ]]
  do
    docker_container_startup "$CONTAINER_CHROME_NODES_IMAGE" "$(printf "$CONTAINER_CHROME_NODES_RUN_CMD" "$COUNTER")"
    COUNTER=$((COUNTER-1));
  done
}

missing_the_internet_app() {
  strip_image_version $CONTAINER_APP_IMAGE;
  i_name="$func_result"
  strip_image_name $CONTAINER_APP_IMAGE;
  i_ver="$func_result"
  printf "The-Internet App image \r"
  var=$(docker images | grep "$i_name" | grep "$i_ver" | wc -l)
  if [ ! "$var" ]; then
    printf "\r\033[KThe-Internet App image not found. Pulling ""$CONTAINER_APP_IMAGE"" from the registry\n";
    func_result="docker pull $CONTAINER_APP_IMAGE";
  else
    func_result=""
  fi
}

missing_selenium_grid() {
  strip_image_version $CONTAINER_SELENIUM_HUB_IMAGE;
  i_name="$func_result"
  strip_image_name $CONTAINER_SELENIUM_HUB_IMAGE;
  i_ver="$func_result"
  printf "Selenium grid image \r"
  var=$(docker images | grep "$i_name" | grep "$i_ver" | wc -l)
  if [ ! "$var" ]; then
    printf "\r\033[KSelenium Grid image not found. Pulling ""$CONTAINER_SELENIUM_HUB_IMAGE"" from the registry\n";
    func_result="docker pull $CONTAINER_SELENIUM_HUB_IMAGE";
  else
    func_result=""
  fi
}

missing_chrome_nodes() {
  strip_image_version $CONTAINER_CHROME_NODES_IMAGE;
  i_name="$func_result"
  strip_image_name $CONTAINER_CHROME_NODES_IMAGE;
  i_ver="$func_result"
  printf "Chrome node image \r"
  var=$(docker images | grep "$i_name" | grep "$i_ver" | wc -l)
  if [ ! "$var" ]; then
    printf "\r\033[KChrome node image not found. Pulling ""$CONTAINER_CHROME_NODES_IMAGE"" from the registry\n";
    func_result="docker pull $CONTAINER_CHROME_NODES_IMAGE";
  else
    func_result=""
  fi
}

missing_docker_network_config() {
  printf "Bridge network configuration \r"
  var=$(docker network inspect dotdash | grep "$NET_NAME" | wc -l)
  if [ ! "$var" ]; then
    printf "\r\033[KBridge network configuration missing. Creating dotdash docker network\n";
    func_result="docker network create -o com.docker.network.bridge.bridge dotdash";
  else
    func_result=""
  fi
}

##############
# Setup
setup_where_necessary() {
  printf "\n[""$BGREEN""Checking dependencies""$NO_COLOR""]\n";
  missing_docker_network_config
  if [ ! "$(eval "$func_result")" ]; then printf "[OK] Bridge network configuration\n"; fi
  missing_the_internet_app
  if [ ! "$(eval "$func_result")" ]; then printf "[OK] The-internet App image\n"; fi
  missing_selenium_grid
  if [ ! "$(eval "$func_result")" ]; then printf "[OK] Selenium grid image\n"; fi
  missing_chrome_nodes
  if [ ! "$(eval "$func_result")" ]; then printf "[OK] Chrome node image\n"; fi
}

##############
# Clean, build, install, and run the test suite
execute_the_tests() {
  printf "$BGREEN""\n[Clean]\n""$NO_COLOR";
  mvn clean -f pom.xml --batch-mode --update-snapshots;
  printf "$BGREEN""\n[Compile]\n""$NO_COLOR";
  mvn compile -f pom.xml --batch-mode --update-snapshots;
  printf "$BGREEN""\n[Install]\n""$NO_COLOR";
  mvn install -f pom.xml -DskipTests --batch-mode --update-snapshots &
  wait;
  printf "$BGREEN""\n[Running the test suite]\n""$NO_COLOR";
  mvn test -e -DsuiteXmlFile="$TEST_SUITE_XML_FILE" -DuseSeleniumGrid="${WD_REMOTE}" -DtestsThreadCount="$THREADS" --batch-mode --update-snapshots -Dorg.slf4j.simpleLogger.defaultLogLevel="${DEFAULT_LOG_LEVEL}";
}

stop_containers() {
  NAMES=$1;
  printf "\n[""$BGREEN""Stopping containers]\n""$NO_COLOR";
  if [ "$NAMES" ]; then # Several names
    if [[ $NAMES =~ "," ]]; then
      IFS=","; read -a starr <<< "$NAMES";
      for i in "${starr[@]}"; do
        docker ps -a -q --filter "name=""$i" | xargs docker rm -f;
      done
    else # Just one name
      docker ps -a -q --filter "name=""$NAMES" | xargs docker rm -f;
    fi;
  else # No name provided
    strip_image_version $CONTAINER_APP_IMAGE;
    docker ps -a -q --filter ancestor="$func_result" | xargs docker rm -f
    if [ "$WD_REMOTE" = "true" ]; then
      strip_image_version $CONTAINER_SELENIUM_HUB_IMAGE;
      docker ps -a -q --filter ancestor="$func_result" | xargs docker rm -f
      strip_image_version $CONTAINER_CHROME_NODES_IMAGE;
      docker ps -a -q --filter ancestor="$func_result" --format="{{.ID}}" | xargs docker rm -f
    fi;
  fi;
}

start_the_internet_app() {
  printf "\n[""$BGREEN""Starting The-Internet App""$NO_COLOR""]\n";
  docker_container_startup "$CONTAINER_APP_IMAGE" "$CONTAINER_APP_RUN_CMD";
  wait_until_container_is_ready "$CONTAINER_APP_IP" "$CONTAINER_APP_PORTS";
}

start_selenium_grid() {
  printf "\n[""$BGREEN""Starting Selenium Grid""$NO_COLOR""]\n";
  docker_container_startup "$CONTAINER_SELENIUM_HUB_IMAGE" "$CONTAINER_SELENIUM_HUB_RUN_CMD";
  wait_until_container_is_ready "$CONTAINER_SELENIUM_HUB_IP" "$CONTAINER_SELENIUM_HUB_PORTS";
  printf "\n[""$BGREEN""Starting Chrome nodes""$NO_COLOR""]\n";
  start_chrome_nodes "$THREADS";
}

##############
# Starting everything
main() {
  setup_where_necessary;

  # Only start/stop Selenium Grid
  case $SG_ACTION in
    stop) stop_containers "website,selenium-hub,chrome-node"; exit 0;;
    start)
      # Init The-internet App
      start_the_internet_app;
      start_selenium_grid;
      exit 0;;
  esac

  # Init The-internet App
  start_the_internet_app;

  # Remote tests execution, init Selenium Grid
  if [[ "$WD_REMOTE" == "true" ]]; then
    start_selenium_grid;
  fi

  # Run the test suite
  execute_the_tests;
  # Add link to the test report
  printf '\n\n['"${BGREEN}"'Test results report: \e]8;;file://%s/target/surefire-reports/index.html\e\\Link to test report\e]8;;\e\\]\n'"${NO_COLOR}"'' "$(pwd)";

  # Stop containers;
  stop_containers &
  wait
}

main;